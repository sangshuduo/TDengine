#
# Configuration
#
git:
  depth: 1

language: c

compiler:
  - clang
  - gcc

os:
  - linux
#  - osx

before_install:
  - |-
    case $TRAVIS_OS_NAME in
      linux)
        sudo apt -y update
        sudo apt -y install python-pip python3-pip python-setuptools python3-setuptools
        ;;
    esac

addons:
  coverity_scan:

    # GitHub project metadata
    # ** specific to your project **
    project:
      name: sangshuduo/TDengine
      version: 2.x
      description: TDengine

    # Where email notification of build analysis results will be sent
    notification_email: sangshuduo@gmail.com

    # Commands to prepare for build_command
    # ** likely specific to your build **
    build_command_prepend: cmake ..

    # The command that will be added as an argument to "cov-build" to compile your project for analysis,
    # ** likely specific to your build **
    build_command: cmake --build .

    # Pattern to match selecting branches that will run analysis. We recommend leaving this set to 'coverity_scan'.
    # Take care in resource usage, and consider the build frequency allowances per
    #   https://scan.coverity.com/faq#frequency
    branch_pattern: coverity_scan

before_script:
  - mkdir debug
  - cd debug

script:
  - cmake .. 
  - cmake --build . || exit $?
  - |-
    case $TRAVIS_OS_NAME in
      linux)
        # Color setting
        RED='\033[0;31m'
        GREEN='\033[1;32m'
        GREEN_DARK='\033[0;32m'
        GREEN_UNDERLINE='\033[4;32m'
        NC='\033[0m'

        sudo make install

        cd ../tests/script
        sudo ./test.sh 2>&1 | grep 'success\|failed' | tee out.txt

        total_success=`grep success out.txt | wc -l`

        if [ "$total_success" -gt "0" ]; then
          total_success=`expr $total_success - 1`
          echo -e "${GREEN} ### Total $total_success TSIM case(s) succeed! ### ${NC}"
        fi

        total_failed=`grep failed out.txt | wc -l`
        if [ "$total_failed" -ne "0" ]; then
          echo -e "${RED} ### Total $total_failed TSIM case(s) failed! ### ${NC}"
          exit $total_failed
        fi

        pip install --user ../../src/connector/python/linux/python2/ 
        pip3 install --user ../../src/connector/python/linux/python3/ 

        cd ../pytest
        sudo ./simpletest.sh 2>&1 | grep 'successfully executed\|failed' | tee pytest-out.txt
        total_py_success=`grep 'successfully executed' pytest-out.txt | wc -l`

        if [ "$total_py_success" -gt "0" ]; then
          echo -e "${GREEN} ### Total $total_py_success python case(s) succeed! ### ${NC}"
        fi

        total_py_failed=`grep 'failed' pytest-out.txt | wc -l`
        if [ "$total_py_failed" -ne "0" ]; then
          echo -e "${RED} ### Total $total_py_failed python case(s) failed! ### ${NC}"
          exit $total_py_failed
        fi

        ;;
    esac

script:
  - cmake .. 
  - cmake --build .

#
# Build Matrix
#
matrix:
  - os: linux
    addons:
      apt:
        packages:
          - build-essential
          - cmake
          - net-tools
          - python-pip
          - python-setuptools
          - python3-pip
          - python3-setuptools

#  - os: osx
#    addons:
#      homebrew:
#        - cmake

